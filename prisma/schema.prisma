generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  articles Article[]
  id                        String             @id @default(cuid())
  name                      String
  email                     String?            @unique
  emailVerified             DateTime?
  image                     String?
  accounts                  Account[]
  documents                 Document[]
  messages                  Message[]
  collaboratorateddocuments Collaborator[]
  createdAt                 DateTime           @default(now())
  feedbacks                 Feedback[]
  flashcardAttempts         FlashcardAttempt[]
  plan                      Plan               @default(FREE)
  phone                     String?
}

enum Plan {
  FREE
  PRO
}

model Document {
  url           String         @unique
  id            String         @id @default(cuid())
  title         String
  owner         User           @relation(fields: [ownerId], references: [id])
  highlights    Highlight[]
  collaborators Collaborator[] @relation("DocumentCollaborators")
  ownerId       String
  note          String?        @db.Text
  messages      Message[]
  isVectorised  Boolean        @default(false)
  createdAt     DateTime       @default(now())
  isUploaded    Boolean        @default(true)
  flashcards    Flashcard[]
  vectorizationProgress Float @default(0)
}

model Article {
  id        String   @id @default(cuid())
  topic     String
  content   String   @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum CollaboratorRole {
  EDITOR
  VIEWER
  OWNER
}

model Collaborator {
  id         String           @id @default(cuid())
  role       CollaboratorRole
  document   Document         @relation("DocumentCollaborators", fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  userId     String
  user       User             @relation(fields: [userId], references: [id])

  @@unique([documentId, userId])
}

model Message {
  id            String   @id @default(cuid())
  text          String
  createdAt     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  document      Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId    String
  isUserMessage Boolean
}

enum HighlightTypeEnum {
  TEXT
  IMAGE
}

model Highlight {
  id                String            @id @default(cuid())
  type              HighlightTypeEnum
  document          Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId        String
  createdAt         DateTime          @default(now())
  boundingRectangle Cordinate?        @relation("boundingRectangle")
  rectangles        Cordinate[]       @relation("rectangles")
  pageNumber        Int?
}

model Cordinate {
  id                            String    @id @default(cuid())
  x1                            Float
  y1                            Float
  x2                            Float
  y2                            Float
  width                         Float
  height                        Float
  pageNumber                    Int?
  highlightedRectangle          Highlight? @relation("rectangles", fields: [highlightedRectangleId], references: [id], onDelete: Cascade)
  highlightedRectangleId        String?
  highlightedBoundingRectangle  Highlight? @relation("boundingRectangle", fields: [highlightedBoundingRectangleId], references: [id], onDelete: Cascade)
  highlightedBoundingRectangleId String?   @unique
}

model Feedback {
  id            String   @id @default(cuid())
  message       String   @db.Text
  contact_email String?
  type          String
  createdAt     DateTime @default(now())
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Flashcard {
  id                String             @id @default(cuid())
  question          String
  answer            String
  document          Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId        String
  createdAt         DateTime           @default(now())
  flashcardAttempts FlashcardAttempt[]
}

model FlashcardAttempt {
  id                String    @id @default(cuid())
  flashcard         Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId       String
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  // option to remove the qn => maybe a hasMemorised boolean
  createdAt         DateTime  @default(now())
  // What user responded
  userResponse      String
  // what user got right
  correctResponse   String?
  // what user got wrong
  incorrectResponse String?
  // more info about the answer
  moreInfo          String?
}
